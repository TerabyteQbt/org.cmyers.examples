#!/bin/bash

set -e
set -x

export GCC_LIBS="" # this is the place to add -lm, -lpthreads, etc
export GCC_INCLUDES="" # any includes in your dependent packages will automatically be added

eval export GCC_BIN=\$GCC_${QBT_ENV_GCC:-5_3}_BIN
export GCC_FLAGS="-Wall -Werror -fPIC -v -DPACKAGE_NAME='$PACKAGE_NAME' -DPACKAGE_CUMULATIVE_VERSION='$PACKAGE_CUMULATIVE_VERSION'"

if [ -n $QBT_ENV_DEBUG ]; then
    export GCC_FLAGS="$GCC_FLAGS -g"
fi

# collect includes from strong deps
for i in $(find $INPUT_ARTIFACTS_DIR/strong -maxdepth 2 -type d -name 'includes'); do
    export GCC_INCLUDES="$GCC_INCLUDES -I$i"
done

# collect object files from strong deps
for i in $(find $INPUT_ARTIFACTS_DIR/strong -maxdepth 2 -type d -name 'libs'); do
    for j in $(find $i -type f -name '*.o'); do
        export GCC_LIBS="$GCC_LIBS $j"
    done
done

# collect source files
for i in $(find . -type f -name '*.c' -o -name '*.cc' -o -name '*.cpp' -o -name '*.cxx' -o -name '*.c++'); do
    export GCC_SOURCES="$GCC_SOURCES $i"
done

mkdir -p $OUTPUT_ARTIFACTS_DIR/{libs,includes}

# todo: use find or cp --parents instead, to prevent extra deps?
rsync -vaH --prune-empty-dirs --include '*/' --include '*.h' --include '*.hpp' --exclude '*' $(pwd)/ $OUTPUT_ARTIFACTS_DIR/includes/

# TODO: build your .o files here.  Should be able to just copy this line for each .o file.  If your
# build is so complex you are tempted to write a Makefile, consider breaking up into smaller
# packages.
$GCC_BIN $GCC_FLAGS $GCC_INCLUDES $GCC_LIBS -c -o $OUTPUT_ARTIFACTS_DIR/libs/$PACKAGE_NAME.o $GCC_SOURCES

# Produce any entrypoints if desired
# mkdir $OUTPUT_ARTIFACTS_DIR/bin
# $GCC_BIN $GCC_FLAGS $GCC_INCLUDES $GCC_LIBS -o $OUTPUT_ARTIFACTS_DIR/bin/myapp $GCC_SOURCES
